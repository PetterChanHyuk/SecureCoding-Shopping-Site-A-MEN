{"ast":null,"code":"import axios from 'axios';\nexport default {\n  data() {\n    return {\n      userData: {\n        email: '',\n        password: '',\n        name: '',\n        phone: '',\n        address: ''\n      },\n      confirmPassword: '',\n      isNameValid: false,\n      isPasswordEntered: false,\n      isPasswordValid: false,\n      isEmailValid: false,\n      isPhoneValid: false,\n      phoneExists: false,\n      emailExists: false\n    };\n  },\n  mounted() {\n    this.loadDaumPostcode();\n  },\n  computed: {\n    isFormValid() {\n      return this.isEmailValid && this.isPasswordValid && this.isNameValid && this.isPhoneValid && !this.emailExists && !this.phoneExists;\n    }\n  },\n  methods: {\n    // HTML 이스케이프 함수\n    escapeHtml(text) {\n      return text.replace(/[&<>\"'`=]/g, function (s) {\n        return {\n          '&': '&amp;',\n          '<': '&lt;',\n          '>': '&gt;',\n          '\"': '&quot;',\n          \"'\": '&#39;',\n          '`': '&#x60;',\n          '=': '&#x3D;'\n        }[s];\n      });\n    },\n    // Daum 주소 API 스크립트 로드\n    loadDaumPostcode() {\n      const script = document.createElement('script');\n      script.src = \"//t1.daumcdn.net/mapjsapi/bundle/postcode/prod/postcode.v2.js\";\n      script.onload = () => this.initializePostcode();\n      document.head.appendChild(script);\n    },\n    // Daum 주소 API 초기화\n    initializePostcode() {\n      // 스크립트 로드가 완료된 후 필요한 초기화 코드\n    },\n    // Daum 주소 검색 실행\n    sample5_execDaumPostcode() {\n      if (typeof daum !== 'undefined') {\n        // eslint-disable-next-line no-undef\n        new daum.Postcode({\n          oncomplete: data => {\n            this.userData.address = data.address; // 주소 필드를 업데이트\n          }\n        }).open();\n      } else {\n        console.error(\"Daum 우편번호 스크립트가 로드되지 않았습니다.\");\n      }\n    },\n    // 이메일 유효성 검사\n    validateEmail() {\n      const emailPattern = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n      this.isEmailValid = emailPattern.test(this.userData.email);\n      this.emailExists = false;\n      if (this.isEmailValid) {\n        axios.get(`${process.env.VUE_APP_BACKEND_URL}/check-email/${this.userData.email}`).then(() => {\n          this.errorMessage = '';\n        }).catch(error => {\n          if (error.response && error.response.status === 409) {\n            this.errorMessage = '이미 존재하는 메일입니다.';\n            this.emailExists = true;\n          } else {\n            this.errorMessage = error.response.data.message || '이메일 검증 중 오류가 발생했습니다.';\n          }\n        });\n      }\n    },\n    // 비밀번호 유효성 검사\n    validatePassword() {\n      const passwordPattern = /^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@$!%*?&])[A-Za-z\\d@$!%*?&]{8,20}$/;\n      this.isPasswordEntered = this.userData.password.length > 0;\n      this.isPasswordMatch = this.userData.password === this.confirmPassword;\n      this.isPasswordValid = passwordPattern.test(this.userData.password);\n      if (!this.isPasswordValid && this.isPasswordEntered) {\n        this.errorMessage = '비밀번호는 8자 이상 20자 이하이며, 대소문자, 숫자, 특수문자를 포함해야 합니다.';\n      } else {\n        this.errorMessage = '';\n      }\n    },\n    // 이름 유효성 검사\n    validateName() {\n      this.isNameValid = this.userData.name.length > 0 && this.userData.name.length <= 50;\n    },\n    // 전화번호 유효성 검사\n    validatePhone() {\n      const phonePattern = /^01[0-9]-[0-9]{3,4}-[0-9]{4}$/;\n      this.isPhoneValid = phonePattern.test(this.userData.phone);\n      if (this.isPhoneValid) {\n        axios.get(`${process.env.VUE_APP_BACKEND_URL}/check-phone/${this.userData.phone}`).then(() => {\n          this.phoneExists = false;\n        }).catch(error => {\n          if (error.response && error.response.status === 409) {\n            this.phoneExists = true;\n          } else {\n            this.errorMessage = '전화번호 검증 중 오류가 발생했습니다.';\n            console.error('Error checking phone number:', error);\n            alert(this.errorMessage);\n          }\n        });\n      }\n    },\n    // 전화번호 형식 자동 변경\n    formatPhoneNumber(event) {\n      let cursorPosition = event.target.selectionStart;\n      let oldValue = this.userData.phone;\n      let newValue = '';\n      let numbers = oldValue.replace(/[^\\d]/g, '');\n      for (let i = 0; i < numbers.length; i++) {\n        if (i === 3 || i === 7) newValue += '-';\n        newValue += numbers[i];\n      }\n      newValue = newValue.slice(0, 13);\n      this.userData.phone = newValue;\n      if (oldValue.length < newValue.length && (cursorPosition === 4 || cursorPosition === 9)) {\n        cursorPosition++;\n      }\n      this.$nextTick(() => {\n        event.target.setSelectionRange(cursorPosition, cursorPosition);\n      });\n      this.validatePhone();\n    },\n    // 회원가입 처리\n    register() {\n      const escapedUserData = {\n        email: this.escapeHtml(this.userData.email),\n        password: this.userData.password,\n        name: this.escapeHtml(this.userData.name),\n        phone: this.escapeHtml(this.userData.phone),\n        address: this.escapeHtml(this.userData.address)\n      };\n      axios.post(`${process.env.VUE_APP_BACKEND_URL}/userregister`, escapedUserData).then(() => {\n        alert(\"회원가입이 완료되었습니다.\\n이메일 인증을 진행해주세요.\\n인증 링크는 이메일로 발송되었습니다.\");\n        this.$router.push('/userlogin');\n      }).catch(error => {\n        let errorMessage = '회원가입에 실패했습니다.';\n        if (error.response) {\n          errorMessage = error.response.data.message || errorMessage;\n          alert(`회원가입에 실패했습니다: ${this.errorMessage}`);\n        } else {\n          errorMessage = \"서버 오류 또는 네트워크 문제로 인한 회원가입 실패\";\n        }\n        console.error('회원가입 실패:', errorMessage);\n        alert(errorMessage);\n        this.resetFormData();\n        location.reload();\n      });\n    },\n    // 폼 데이터 초기화\n    resetFormData() {\n      this.userData.email = '';\n      this.userData.password = '';\n      this.userData.name = '';\n      this.userData.phone = '';\n      this.userData.address = '';\n      this.confirmPassword = '';\n      this.isNameValid = false;\n      this.isPasswordEntered = false;\n      this.isPasswordValid = false;\n      this.isEmailValid = false;\n      this.isPhoneValid = false;\n    }\n  }\n};","map":{"version":3,"names":["axios","data","userData","email","password","name","phone","address","confirmPassword","isNameValid","isPasswordEntered","isPasswordValid","isEmailValid","isPhoneValid","phoneExists","emailExists","mounted","loadDaumPostcode","computed","isFormValid","methods","escapeHtml","text","replace","s","script","document","createElement","src","onload","initializePostcode","head","appendChild","sample5_execDaumPostcode","daum","Postcode","oncomplete","open","console","error","validateEmail","emailPattern","test","get","process","env","VUE_APP_BACKEND_URL","then","errorMessage","catch","response","status","message","validatePassword","passwordPattern","length","isPasswordMatch","validateName","validatePhone","phonePattern","alert","formatPhoneNumber","event","cursorPosition","target","selectionStart","oldValue","newValue","numbers","i","slice","$nextTick","setSelectionRange","register","escapedUserData","post","$router","push","resetFormData","location","reload"],"sources":["D:\\SecureCoding-Shopping-Site-A-MEN\\my-diary-app\\client\\src\\components\\UserRegister.vue"],"sourcesContent":["<template>\r\n  <div class=\"register-container\">\r\n    <h1>회원가입</h1>\r\n    <form @submit.prevent=\"register\">\r\n      <div>\r\n        <label for=\"email\">이메일:</label>\r\n        <input type=\"email\" id=\"email\" v-model=\"userData.email\" @input=\"validateEmail\" :class=\"{ 'is-invalid': !isEmailValid || emailExists, 'is-valid': isEmailValid && !emailExists }\" maxlength=\"100\" required>\r\n        <p v-if=\"!isEmailValid\" class=\"warning-text\">유효한 이메일 주소를 입력해주세요.</p>\r\n        <p v-else-if=\"emailExists\" class=\"warning-text\">이미 존재하는 메일입니다.</p>\r\n      </div>\r\n      <div>\r\n        <label for=\"password\">비밀번호:</label>\r\n        <input type=\"password\" id=\"password\" v-model=\"userData.password\" @input=\"validatePassword\" :class=\"{ 'is-invalid': !isPasswordValid, 'is-valid': isPasswordValid }\" maxlength=\"20\" required>\r\n        <p v-if=\"!isPasswordValid && isPasswordEntered\" class=\"warning-text\">{{ errorMessage }}</p>\r\n      </div>\r\n      <div>\r\n        <label for=\"confirmPassword\">비밀번호 확인:</label>\r\n        <input type=\"password\" id=\"confirmPassword\" v-model=\"confirmPassword\" @input=\"validatePassword\" :class=\"{ 'is-invalid': !isPasswordMatch, 'is-valid': isPasswordValid && confirmPassword }\" maxlength=\"20\" required>\r\n        <p v-if=\"!isPasswordMatch && confirmPassword\" class=\"warning-text\">비밀번호가 일치하지 않습니다.</p>\r\n      </div>\r\n\r\n      <div>\r\n        <label for=\"name\">이름:</label>\r\n        <input type=\"text\" id=\"name\" v-model=\"userData.name\" @input=\"validateName\" :class=\"{ 'is-invalid': !isNameValid, 'is-valid': isNameValid }\" maxlength=\"50\" required>\r\n        <p v-if=\"!userData.name\" class=\"warning-text\">이름을 입력해주세요.</p>\r\n      </div>\r\n      <div>\r\n        <label for=\"phone\">전화번호:</label>\r\n        <input type=\"text\" id=\"phone\" v-model=\"userData.phone\" @input=\"formatPhoneNumber\" :class=\"{ 'is-invalid': !isPhoneValid || phoneExists, 'is-valid': isPhoneValid && !phoneExists }\" maxlength=\"13\" required>\r\n        <p v-if=\"!isPhoneValid\" class=\"warning-text\">01x-xxxx-xxxx 형식으로 입력해주세요.</p>\r\n        <p v-else-if=\"phoneExists\" class=\"warning-text\">이미 사용 중인 전화번호입니다.</p>\r\n      </div>\r\n      <div>\r\n        <label for=\"address\">주소:</label>\r\n        <input type=\"text\" id=\"sample5_address\" placeholder=\"주소\" v-model=\"userData.address\" readonly maxlength=\"200\">\r\n        <input type=\"button\" @click=\"sample5_execDaumPostcode()\" value=\"주소 검색\">\r\n      </div>\r\n      <button type=\"submit\" :disabled=\"!isFormValid\" :class=\"{ 'button-active': isFormValid, 'button-inactive': !isFormValid }\">등록</button>\r\n    </form>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport axios from 'axios';\r\n\r\nexport default {\r\n  data() {\r\n    return {\r\n      userData: {\r\n        email: '',\r\n        password: '',\r\n        name: '',\r\n        phone: '',\r\n        address: ''\r\n      },\r\n      confirmPassword: '',\r\n      isNameValid: false,\r\n      isPasswordEntered: false,\r\n      isPasswordValid: false,\r\n      isEmailValid: false,\r\n      isPhoneValid: false,\r\n      phoneExists: false,\r\n      emailExists: false\r\n    };\r\n  },\r\n  mounted() {\r\n    this.loadDaumPostcode();\r\n  },\r\n  computed: {\r\n    isFormValid() {\r\n      return (\r\n        this.isEmailValid &&\r\n        this.isPasswordValid &&\r\n        this.isNameValid &&\r\n        this.isPhoneValid &&\r\n        !this.emailExists &&\r\n        !this.phoneExists\r\n      );\r\n    }\r\n  },\r\n  methods: {\r\n    // HTML 이스케이프 함수\r\n    escapeHtml(text) {\r\n      return text.replace(/[&<>\"'`=]/g, function (s) {\r\n        return {\r\n          '&': '&amp;',\r\n          '<': '&lt;',\r\n          '>': '&gt;',\r\n          '\"': '&quot;',\r\n          \"'\": '&#39;',\r\n          '`': '&#x60;',\r\n          '=': '&#x3D;'\r\n        }[s];\r\n      });\r\n    },\r\n    // Daum 주소 API 스크립트 로드\r\n    loadDaumPostcode() {\r\n      const script = document.createElement('script');\r\n      script.src = \"//t1.daumcdn.net/mapjsapi/bundle/postcode/prod/postcode.v2.js\";\r\n      script.onload = () => this.initializePostcode();\r\n      document.head.appendChild(script);\r\n    },\r\n    // Daum 주소 API 초기화\r\n    initializePostcode() {\r\n      // 스크립트 로드가 완료된 후 필요한 초기화 코드\r\n    },\r\n    // Daum 주소 검색 실행\r\n    sample5_execDaumPostcode() {\r\n      if (typeof daum !== 'undefined') {\r\n        // eslint-disable-next-line no-undef\r\n        new daum.Postcode({\r\n          oncomplete: (data) => {\r\n            this.userData.address = data.address; // 주소 필드를 업데이트\r\n          }\r\n        }).open();\r\n      } else {\r\n        console.error(\"Daum 우편번호 스크립트가 로드되지 않았습니다.\");\r\n      }\r\n    },\r\n    // 이메일 유효성 검사\r\n    validateEmail() {\r\n      const emailPattern = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\r\n      this.isEmailValid = emailPattern.test(this.userData.email);\r\n      this.emailExists = false;\r\n\r\n      if (this.isEmailValid) {\r\n        axios.get(`${process.env.VUE_APP_BACKEND_URL}/check-email/${this.userData.email}`)\r\n          .then(() => {\r\n            this.errorMessage = '';\r\n          })\r\n          .catch(error => {\r\n            if (error.response && error.response.status === 409) {\r\n              this.errorMessage = '이미 존재하는 메일입니다.';\r\n              this.emailExists = true;\r\n            } else {\r\n              this.errorMessage = error.response.data.message || '이메일 검증 중 오류가 발생했습니다.';\r\n            }\r\n          });\r\n      }\r\n    },\r\n    // 비밀번호 유효성 검사\r\n    validatePassword() {\r\n      const passwordPattern = /^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@$!%*?&])[A-Za-z\\d@$!%*?&]{8,20}$/;\r\n      this.isPasswordEntered = this.userData.password.length > 0;\r\n      this.isPasswordMatch = this.userData.password === this.confirmPassword;\r\n      this.isPasswordValid = passwordPattern.test(this.userData.password);\r\n      if (!this.isPasswordValid && this.isPasswordEntered) {\r\n        this.errorMessage = '비밀번호는 8자 이상 20자 이하이며, 대소문자, 숫자, 특수문자를 포함해야 합니다.';\r\n      } else {\r\n        this.errorMessage = '';\r\n      }\r\n    },\r\n    // 이름 유효성 검사\r\n    validateName() {\r\n      this.isNameValid = this.userData.name.length > 0 && this.userData.name.length <= 50;\r\n    },\r\n    // 전화번호 유효성 검사\r\n    validatePhone() {\r\n      const phonePattern = /^01[0-9]-[0-9]{3,4}-[0-9]{4}$/;\r\n      this.isPhoneValid = phonePattern.test(this.userData.phone);\r\n\r\n      if (this.isPhoneValid) {\r\n        axios.get(`${process.env.VUE_APP_BACKEND_URL}/check-phone/${this.userData.phone}`)\r\n          .then(() => {\r\n            this.phoneExists = false;\r\n          })\r\n          .catch(error => {\r\n            if (error.response && error.response.status === 409) {\r\n              this.phoneExists = true;\r\n            } else {\r\n              this.errorMessage = '전화번호 검증 중 오류가 발생했습니다.';\r\n              console.error('Error checking phone number:', error);\r\n              alert(this.errorMessage);\r\n            }\r\n          });\r\n      }\r\n    },\r\n    // 전화번호 형식 자동 변경\r\n    formatPhoneNumber(event) {\r\n      let cursorPosition = event.target.selectionStart;\r\n      let oldValue = this.userData.phone;\r\n      let newValue = '';\r\n      let numbers = oldValue.replace(/[^\\d]/g, '');\r\n\r\n      for (let i = 0; i < numbers.length; i++) {\r\n        if (i === 3 || i === 7) newValue += '-';\r\n        newValue += numbers[i];\r\n      }\r\n\r\n      newValue = newValue.slice(0, 13);\r\n      this.userData.phone = newValue;\r\n\r\n      if (oldValue.length < newValue.length && (cursorPosition === 4 || cursorPosition === 9)) {\r\n        cursorPosition++;\r\n      }\r\n\r\n      this.$nextTick(() => {\r\n        event.target.setSelectionRange(cursorPosition, cursorPosition);\r\n      });\r\n\r\n      this.validatePhone();\r\n    },\r\n    // 회원가입 처리\r\n    register() {\r\n      const escapedUserData = {\r\n        email: this.escapeHtml(this.userData.email),\r\n        password: this.userData.password,\r\n        name: this.escapeHtml(this.userData.name),\r\n        phone: this.escapeHtml(this.userData.phone),\r\n        address: this.escapeHtml(this.userData.address)\r\n      };\r\n\r\n      axios.post(`${process.env.VUE_APP_BACKEND_URL}/userregister`, escapedUserData)\r\n        .then(() => {\r\n          alert(\"회원가입이 완료되었습니다.\\n이메일 인증을 진행해주세요.\\n인증 링크는 이메일로 발송되었습니다.\");\r\n          this.$router.push('/userlogin');\r\n        })\r\n        .catch(error => {\r\n          let errorMessage = '회원가입에 실패했습니다.';\r\n\r\n          if (error.response) {\r\n            errorMessage = error.response.data.message || errorMessage;\r\n            alert(`회원가입에 실패했습니다: ${this.errorMessage}`);\r\n          } else {\r\n            errorMessage = \"서버 오류 또는 네트워크 문제로 인한 회원가입 실패\";\r\n          }\r\n\r\n          console.error('회원가입 실패:', errorMessage);\r\n          alert(errorMessage);\r\n\r\n          this.resetFormData();\r\n          location.reload();\r\n        });\r\n    },\r\n    // 폼 데이터 초기화\r\n    resetFormData() {\r\n      this.userData.email = '';\r\n      this.userData.password = '';\r\n      this.userData.name = '';\r\n      this.userData.phone = '';\r\n      this.userData.address = '';\r\n      this.confirmPassword = '';\r\n      this.isNameValid = false;\r\n      this.isPasswordEntered = false;\r\n      this.isPasswordValid = false;\r\n      this.isEmailValid = false;\r\n      this.isPhoneValid = false;\r\n    }\r\n  }\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.register-container {\r\n  max-width: 300px;\r\n  margin: auto;\r\n  padding: 20px;\r\n  box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);\r\n}\r\n\r\nlabel {\r\n  display: block;\r\n}\r\n\r\ninput[type=\"email\"],\r\ninput[type=\"password\"],\r\ninput[type=\"text\"],\r\ninput[type=\"button\"],\r\nbutton {\r\n  width: 80%;\r\n  padding: 10px;\r\n  margin-bottom: 15px;\r\n  border: 1px solid #ddd;\r\n}\r\n\r\nbutton {\r\n  padding: 10px;\r\n  background-color: blue;\r\n  color: white;\r\n  border: none;\r\n  cursor: pointer;\r\n}\r\n\r\nbutton.button-active {\r\n  background-color: blue;\r\n  color: white;\r\n}\r\n\r\nbutton.button-inactive {\r\n  background-color: #ccc;\r\n  color: #666;\r\n  cursor: not-allowed;\r\n}\r\n\r\ninput.is-valid {\r\n  border: 1px solid green !important;\r\n}\r\n\r\ninput.is-invalid {\r\n  border: 1px solid red !important;\r\n}\r\n\r\n.warning-text {\r\n  color: red;\r\n  font-size: 0.8em;\r\n  margin-top: -10px;\r\n  margin-bottom: 10px;\r\n}\r\n</style>\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}