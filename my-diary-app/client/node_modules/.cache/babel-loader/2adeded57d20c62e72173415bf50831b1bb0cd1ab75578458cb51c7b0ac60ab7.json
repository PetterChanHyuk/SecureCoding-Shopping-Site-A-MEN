{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport axios from 'axios';\nexport default {\n  data() {\n    return {\n      newPassword: '',\n      confirmPassword: '',\n      isNewPasswordValid: false,\n      isConfirmPasswordValid: false,\n      userId: this.$route.query.userId || localStorage.getItem('userId'),\n      remainingTime: 600,\n      // 초단위 (10분)\n      timer: null\n    };\n  },\n  created() {\n    const token = this.$route.query.token;\n    if (token) {\n      // 서버에 토큰 유효성 확인 요청\n      axios.get(`${process.env.VUE_APP_BACKEND_URL}/verify-reset-token?token=${token}`).then(response => {\n        // 서버로부터 userId 받아 처리\n        this.userId = response.data.userId;\n      }).catch(() => {\n        // 토큰 만료 또는 유효하지 않은 경우\n        alert('링크가 만료되었거나 유효하지 않습니다.');\n        this.$router.push('/');\n      });\n    } else if (!this.userId) {\n      // 마이페이지에서 직접 접근한 경우\n      alert(\"비정상적인 접근입니다.\");\n      this.$router.push('/userlogin');\n    }\n  },\n  computed: {\n    isFormValid() {\n      return this.isNewPasswordValid && this.isConfirmPasswordValid;\n    }\n  },\n  methods: {\n    validateNewPassword() {\n      this.isNewPasswordValid = this.newPassword.length > 0;\n    },\n    validateConfirmPassword() {\n      this.isConfirmPasswordValid = this.newPassword === this.confirmPassword;\n    },\n    updatePassword() {\n      if (!this.isFormValid) {\n        alert(\"비밀번호 유효성 검사를 통과하지 못했습니다.\");\n        return;\n      }\n      axios.post(`${process.env.VUE_APP_BACKEND_URL}/updatePassword`, {\n        userId: this.userId,\n        newPassword: this.newPassword\n      }).then(() => {\n        alert(\"비밀번호가 성공적으로 변경되었습니다.\");\n        this.$router.push('/userlogin');\n      }).catch(error => {\n        console.error('비밀번호 변경 오류:', error);\n        alert('비밀번호 변경 중 오류가 발생했습니다.');\n      });\n    },\n    resetTimer() {\n      this.remainingTime = 600; // 타이머를 10분으로 재설정\n    },\n    updateTimer() {\n      if (this.remainingTime > 0) {\n        this.remainingTime--;\n      } else {\n        this.logout(); // 타이머가 0이 되면 로그아웃 실행\n      }\n    },\n    logout() {\n      clearInterval(this.timer); // 타이머 초기화\n      const userId = localStorage.getItem('userId');\n      if (userId) {\n        axios.post(`${process.env.VUE_APP_BACKEND_URL}/userlogout`, {\n          userId\n        }).then(() => {\n          localStorage.removeItem('userId');\n          this.$router.push('/userlogin'); // 로그인 페이지로 리디렉션\n        }).catch(error => {\n          console.error('로그아웃 실패:', error);\n        });\n      }\n    },\n    handleBeforeUnload() {\n      this.logout();\n    }\n  },\n  mounted() {\n    this.timer = setInterval(this.updateTimer, 1000); // 1초마다 타이머 감소\n\n    // 사용자 활동 감지\n    window.addEventListener('mousemove', this.resetTimer);\n    window.addEventListener('keydown', this.resetTimer);\n\n    // 창 닫기 또는 새로고침 시 로그아웃\n    window.addEventListener('beforeunload', this.handleBeforeUnload);\n  },\n  beforeUnmount() {\n    clearInterval(this.timer); // 컴포넌트가 제거되면 타이머 정리\n    window.removeEventListener('mousemove', this.resetTimer);\n    window.removeEventListener('keydown', this.resetTimer);\n    window.removeEventListener('beforeunload', this.handleBeforeUnload);\n  }\n};","map":{"version":3,"names":["axios","data","newPassword","confirmPassword","isNewPasswordValid","isConfirmPasswordValid","userId","$route","query","localStorage","getItem","remainingTime","timer","created","token","get","process","env","VUE_APP_BACKEND_URL","then","response","catch","alert","$router","push","computed","isFormValid","methods","validateNewPassword","length","validateConfirmPassword","updatePassword","post","error","console","resetTimer","updateTimer","logout","clearInterval","removeItem","handleBeforeUnload","mounted","setInterval","window","addEventListener","beforeUnmount","removeEventListener"],"sources":["D:\\SecureCoding-Shopping-Site-A-MEN\\my-diary-app\\client\\src\\components\\ResetPassword.vue"],"sourcesContent":["<template>\r\n  <div class=\"reset-password-container\">\r\n    <div class=\"timer\">자동 로그아웃: {{ remainingTime }}초</div>\r\n    <h1 class=\"reset-password-header\">비밀번호 재설정</h1>\r\n    <div class=\"inputs-container\">\r\n      <div>\r\n        <input type=\"password\" placeholder=\"새 비밀번호\" class=\"input-field\" v-model=\"newPassword\" @input=\"validateNewPassword\" :class=\"{ 'is-invalid': !isNewPasswordValid, 'is-valid': isNewPasswordValid }\" />\r\n        <p v-if=\"!isNewPasswordValid\" class=\"warning-text\">비밀번호를 입력해주세요.</p>\r\n      </div>\r\n      <div>\r\n        <input type=\"password\" placeholder=\"새 비밀번호 확인\" class=\"input-field\" v-model=\"confirmPassword\" @input=\"validateConfirmPassword\" :class=\"{ 'is-invalid': !isConfirmPasswordValid, 'is-valid': isConfirmPasswordValid }\" />\r\n        <p v-if=\"!isConfirmPasswordValid\" class=\"warning-text\">같은 비밀번호를 입력해주세요.</p>\r\n      </div>\r\n      <button class=\"reset-password-btn\" @click=\"updatePassword\" :disabled=\"!isFormValid\">재설정</button>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport axios from 'axios';\r\n\r\nexport default {\r\n  data() {\r\n    return {\r\n      newPassword: '',\r\n      confirmPassword: '',\r\n      isNewPasswordValid: false,\r\n      isConfirmPasswordValid: false,\r\n      userId: this.$route.query.userId || localStorage.getItem('userId'),\r\n      remainingTime: 600, // 초단위 (10분)\r\n      timer: null\r\n    };\r\n  },\r\n  created() {\r\n    const token = this.$route.query.token;\r\n\r\n    if (token) {\r\n      // 서버에 토큰 유효성 확인 요청\r\n      axios.get(`${process.env.VUE_APP_BACKEND_URL}/verify-reset-token?token=${token}`)\r\n        .then(response => {\r\n          // 서버로부터 userId 받아 처리\r\n          this.userId = response.data.userId;\r\n        })\r\n        .catch(() => {\r\n          // 토큰 만료 또는 유효하지 않은 경우\r\n          alert('링크가 만료되었거나 유효하지 않습니다.');\r\n          this.$router.push('/');\r\n        });\r\n    } else if (!this.userId) {\r\n      // 마이페이지에서 직접 접근한 경우\r\n      alert(\"비정상적인 접근입니다.\");\r\n      this.$router.push('/userlogin');\r\n    }\r\n  },\r\n  computed: {\r\n    isFormValid() {\r\n      return this.isNewPasswordValid && this.isConfirmPasswordValid;\r\n    }\r\n  },\r\n  methods: {\r\n    validateNewPassword() {\r\n      this.isNewPasswordValid = this.newPassword.length > 0;\r\n    },\r\n    validateConfirmPassword() {\r\n      this.isConfirmPasswordValid = this.newPassword === this.confirmPassword;\r\n    },\r\n    updatePassword() {\r\n      if (!this.isFormValid) {\r\n        alert(\"비밀번호 유효성 검사를 통과하지 못했습니다.\");\r\n        return;\r\n      }\r\n      axios.post(`${process.env.VUE_APP_BACKEND_URL}/updatePassword`, {\r\n        userId: this.userId,\r\n        newPassword: this.newPassword\r\n      })\r\n      .then(() => {\r\n        alert(\"비밀번호가 성공적으로 변경되었습니다.\");\r\n        this.$router.push('/userlogin');\r\n      })\r\n      .catch(error => {\r\n        console.error('비밀번호 변경 오류:', error);\r\n        alert('비밀번호 변경 중 오류가 발생했습니다.');\r\n      });\r\n    },\r\n    resetTimer() {\r\n      this.remainingTime = 600; // 타이머를 10분으로 재설정\r\n    },\r\n    updateTimer() {\r\n      if (this.remainingTime > 0) {\r\n        this.remainingTime--;\r\n      } else {\r\n        this.logout(); // 타이머가 0이 되면 로그아웃 실행\r\n      }\r\n    },\r\n    logout() {\r\n      clearInterval(this.timer); // 타이머 초기화\r\n      const userId = localStorage.getItem('userId');\r\n      if (userId) {\r\n        axios.post(`${process.env.VUE_APP_BACKEND_URL}/userlogout`, { userId })\r\n          .then(() => {\r\n            localStorage.removeItem('userId');\r\n            this.$router.push('/userlogin'); // 로그인 페이지로 리디렉션\r\n          })\r\n          .catch(error => {\r\n            console.error('로그아웃 실패:', error);\r\n          });\r\n      }\r\n    },\r\n    handleBeforeUnload() {\r\n      this.logout();\r\n    }\r\n  },\r\n  mounted() {\r\n    this.timer = setInterval(this.updateTimer, 1000); // 1초마다 타이머 감소\r\n\r\n    // 사용자 활동 감지\r\n    window.addEventListener('mousemove', this.resetTimer);\r\n    window.addEventListener('keydown', this.resetTimer);\r\n\r\n    // 창 닫기 또는 새로고침 시 로그아웃\r\n    window.addEventListener('beforeunload', this.handleBeforeUnload);\r\n  },\r\n  beforeUnmount() {\r\n    clearInterval(this.timer); // 컴포넌트가 제거되면 타이머 정리\r\n    window.removeEventListener('mousemove', this.resetTimer);\r\n    window.removeEventListener('keydown', this.resetTimer);\r\n    window.removeEventListener('beforeunload', this.handleBeforeUnload);\r\n  }\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.reset-password-container {\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  padding: 20px;\r\n  border-radius: 10px;\r\n  box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);\r\n  width: 400px;\r\n  margin: auto;\r\n}\r\n\r\n.reset-password-header {\r\n  font-size: 1.5rem;\r\n  color: #333;\r\n  margin-bottom: 20px;\r\n}\r\n\r\n.inputs-container {\r\n  width: 100%;\r\n}\r\n\r\n.input-field {\r\n  width: 250px;\r\n  padding: 10px;\r\n  margin-bottom: 10px;\r\n  border: 1px solid #ddd;\r\n  border-radius: 4px;\r\n}\r\n\r\nbutton {\r\n  width: 100%;\r\n  padding: 10px;\r\n  background-color: #007bff;\r\n  color: white;\r\n  border: none;\r\n  border-radius: 4px;\r\n  cursor: pointer;\r\n}\r\n\r\nbutton:disabled {\r\n  background-color: #ccc;\r\n  cursor: not-allowed;\r\n}\r\n\r\n.input-field.is-valid {\r\n  border: 1px solid green;\r\n}\r\n\r\n.input-field.is-invalid {\r\n  border: 1px solid red;\r\n}\r\n\r\n.warning-text {\r\n  color: red;\r\n  font-size: 0.8rem;\r\n  margin-top: -5px;\r\n}\r\n\r\n.timer {\r\n  font-size: 1rem;\r\n  color: red;\r\n  margin-bottom: 10px;\r\n}\r\n</style>\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}