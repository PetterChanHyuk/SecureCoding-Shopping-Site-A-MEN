{"ast":null,"code":"import axios from 'axios';\nexport default {\n  name: 'AddItem',\n  data() {\n    return {\n      newItemName: '',\n      // 새로운 아이템의 이름\n      newItemCategory: null,\n      // 새로운 아이템의 카테고리\n      categories: [],\n      selectedFile: null,\n      // 선택된 파일\n      imageUrl: '' // 업로드된 이미지의 URL\n    };\n  },\n  methods: {\n    onFileChange(event) {\n      this.selectedFile = event.target.files[0];\n    },\n    async uploadFile() {\n      if (!this.selectedFile) return '';\n      const formData = new FormData();\n      formData.append('file', this.selectedFile);\n      try {\n        const response = await axios.post(`${process.env.VUE_APP_BACKEND_URL}/upload`, formData, {\n          headers: {\n            'Content-Type': 'multipart/form-data'\n          }\n        });\n        return response.data.filePath;\n      } catch (error) {\n        console.error('파일 업로드 실패:', error);\n        return '';\n      }\n    },\n    async addItem() {\n      if (!this.newItemName || !this.newItemCategory) {\n        alert('아이템 이름과 카테고리를 선택해주세요.');\n        return;\n      }\n      const imageUrl = await this.uploadFile();\n      const newItem = {\n        name: this.newItemName,\n        categoryId: this.newItemCategory,\n        imageUrl\n      };\n      axios.post(`${process.env.VUE_APP_BACKEND_URL}/items`, newItem).then(() => {\n        alert('아이템이 성공적으로 추가되었습니다.');\n        this.newItemName = '';\n        this.newItemCategory = null;\n        this.selectedFile = null;\n        this.imageUrl = '';\n      }).catch(error => {\n        console.error('아이템 추가 실패:', error);\n      });\n    },\n    fetchCategories() {\n      axios.get(`${process.env.VUE_APP_BACKEND_URL}/categories`).then(response => {\n        this.categories = response.data;\n      }).catch(error => {\n        console.error('Error fetching categories:', error);\n      });\n    }\n  },\n  created() {\n    this.fetchCategories(); // 컴포넌트 생성 시 카테고리 조회\n  }\n};","map":{"version":3,"names":["axios","name","data","newItemName","newItemCategory","categories","selectedFile","imageUrl","methods","onFileChange","event","target","files","uploadFile","formData","FormData","append","response","post","process","env","VUE_APP_BACKEND_URL","headers","filePath","error","console","addItem","alert","newItem","categoryId","then","catch","fetchCategories","get","created"],"sources":["D:\\SecureCoding-Shopping-Site-A-MEN\\my-diary-app\\client\\src\\components\\AddItem.vue"],"sourcesContent":["<template>\r\n    <div class=\"add-item-page\">\r\n      <h2>새로운 아이템 추가</h2>\r\n      <input type=\"text\" v-model=\"newItemName\" placeholder=\"Item Name\" />\r\n      <select v-model=\"newItemCategory\">\r\n        <option v-for=\"category in categories\" :key=\"category.id\" :value=\"category.id\">\r\n          {{ category.name }}\r\n        </option>\r\n      </select>\r\n      <input type=\"file\" @change=\"onFileChange\" />\r\n      <button @click=\"addItem\">추가</button>\r\n    </div>\r\n  </template>\r\n  \r\n  <script>\r\n  import axios from 'axios';\r\n  \r\n  export default {\r\n    name: 'AddItem',\r\n    data() {\r\n      return {\r\n        newItemName: '', // 새로운 아이템의 이름\r\n        newItemCategory: null, // 새로운 아이템의 카테고리\r\n        categories: [],\r\n        selectedFile: null, // 선택된 파일\r\n        imageUrl: '' // 업로드된 이미지의 URL\r\n      };\r\n    },\r\n    methods: {\r\n      onFileChange(event) {\r\n        this.selectedFile = event.target.files[0];\r\n      },\r\n      async uploadFile() {\r\n        if (!this.selectedFile) return '';\r\n  \r\n        const formData = new FormData();\r\n        formData.append('file', this.selectedFile);\r\n  \r\n        try {\r\n          const response = await axios.post(`${process.env.VUE_APP_BACKEND_URL}/upload`, formData, {\r\n            headers: {\r\n              'Content-Type': 'multipart/form-data'\r\n            }\r\n          });\r\n          return response.data.filePath;\r\n        } catch (error) {\r\n          console.error('파일 업로드 실패:', error);\r\n          return '';\r\n        }\r\n      },\r\n      async addItem() {\r\n        if (!this.newItemName || !this.newItemCategory) {\r\n          alert('아이템 이름과 카테고리를 선택해주세요.');\r\n          return;\r\n        }\r\n  \r\n        const imageUrl = await this.uploadFile();\r\n  \r\n        const newItem = {\r\n          name: this.newItemName,\r\n          categoryId: this.newItemCategory,\r\n          imageUrl\r\n        };\r\n  \r\n        axios.post(`${process.env.VUE_APP_BACKEND_URL}/items`, newItem)\r\n          .then(() => {\r\n            alert('아이템이 성공적으로 추가되었습니다.');\r\n            this.newItemName = '';\r\n            this.newItemCategory = null;\r\n            this.selectedFile = null;\r\n            this.imageUrl = '';\r\n          })\r\n          .catch(error => {\r\n            console.error('아이템 추가 실패:', error);\r\n          });\r\n      },\r\n      fetchCategories() {\r\n        axios.get(`${process.env.VUE_APP_BACKEND_URL}/categories`)\r\n          .then(response => {\r\n            this.categories = response.data;\r\n          })\r\n          .catch(error => {\r\n            console.error('Error fetching categories:', error);\r\n          });\r\n      }\r\n    },\r\n    created() {\r\n      this.fetchCategories(); // 컴포넌트 생성 시 카테고리 조회\r\n    }\r\n  };\r\n  </script>\r\n  \r\n  <style>\r\n  .add-item-page {\r\n    margin-top: 20px;\r\n    padding: 20px;\r\n    border: 1px solid #ddd;\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-items: center;\r\n  }\r\n  .add-item-page input,\r\n  .add-item-page select {\r\n    padding: 10px;\r\n    font-size: 16px;\r\n    margin-bottom: 10px;\r\n  }\r\n  .add-item-page button {\r\n    padding: 10px 20px;\r\n    font-size: 16px;\r\n    cursor: pointer;\r\n  }\r\n  </style>\r\n  "],"mappings":"AAeE,OAAOA,KAAI,MAAO,OAAO;AAEzB,eAAe;EACbC,IAAI,EAAE,SAAS;EACfC,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,WAAW,EAAE,EAAE;MAAE;MACjBC,eAAe,EAAE,IAAI;MAAE;MACvBC,UAAU,EAAE,EAAE;MACdC,YAAY,EAAE,IAAI;MAAE;MACpBC,QAAQ,EAAE,EAAC,CAAE;IACf,CAAC;EACH,CAAC;EACDC,OAAO,EAAE;IACPC,YAAYA,CAACC,KAAK,EAAE;MAClB,IAAI,CAACJ,YAAW,GAAII,KAAK,CAACC,MAAM,CAACC,KAAK,CAAC,CAAC,CAAC;IAC3C,CAAC;IACD,MAAMC,UAAUA,CAAA,EAAG;MACjB,IAAI,CAAC,IAAI,CAACP,YAAY,EAAE,OAAO,EAAE;MAEjC,MAAMQ,QAAO,GAAI,IAAIC,QAAQ,CAAC,CAAC;MAC/BD,QAAQ,CAACE,MAAM,CAAC,MAAM,EAAE,IAAI,CAACV,YAAY,CAAC;MAE1C,IAAI;QACF,MAAMW,QAAO,GAAI,MAAMjB,KAAK,CAACkB,IAAI,CAAE,GAAEC,OAAO,CAACC,GAAG,CAACC,mBAAoB,SAAQ,EAAEP,QAAQ,EAAE;UACvFQ,OAAO,EAAE;YACP,cAAc,EAAE;UAClB;QACF,CAAC,CAAC;QACF,OAAOL,QAAQ,CAACf,IAAI,CAACqB,QAAQ;MAC/B,EAAE,OAAOC,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,YAAY,EAAEA,KAAK,CAAC;QAClC,OAAO,EAAE;MACX;IACF,CAAC;IACD,MAAME,OAAOA,CAAA,EAAG;MACd,IAAI,CAAC,IAAI,CAACvB,WAAU,IAAK,CAAC,IAAI,CAACC,eAAe,EAAE;QAC9CuB,KAAK,CAAC,uBAAuB,CAAC;QAC9B;MACF;MAEA,MAAMpB,QAAO,GAAI,MAAM,IAAI,CAACM,UAAU,CAAC,CAAC;MAExC,MAAMe,OAAM,GAAI;QACd3B,IAAI,EAAE,IAAI,CAACE,WAAW;QACtB0B,UAAU,EAAE,IAAI,CAACzB,eAAe;QAChCG;MACF,CAAC;MAEDP,KAAK,CAACkB,IAAI,CAAE,GAAEC,OAAO,CAACC,GAAG,CAACC,mBAAoB,QAAO,EAAEO,OAAO,EAC3DE,IAAI,CAAC,MAAM;QACVH,KAAK,CAAC,qBAAqB,CAAC;QAC5B,IAAI,CAACxB,WAAU,GAAI,EAAE;QACrB,IAAI,CAACC,eAAc,GAAI,IAAI;QAC3B,IAAI,CAACE,YAAW,GAAI,IAAI;QACxB,IAAI,CAACC,QAAO,GAAI,EAAE;MACpB,CAAC,EACAwB,KAAK,CAACP,KAAI,IAAK;QACdC,OAAO,CAACD,KAAK,CAAC,YAAY,EAAEA,KAAK,CAAC;MACpC,CAAC,CAAC;IACN,CAAC;IACDQ,eAAeA,CAAA,EAAG;MAChBhC,KAAK,CAACiC,GAAG,CAAE,GAAEd,OAAO,CAACC,GAAG,CAACC,mBAAoB,aAAY,EACtDS,IAAI,CAACb,QAAO,IAAK;QAChB,IAAI,CAACZ,UAAS,GAAIY,QAAQ,CAACf,IAAI;MACjC,CAAC,EACA6B,KAAK,CAACP,KAAI,IAAK;QACdC,OAAO,CAACD,KAAK,CAAC,4BAA4B,EAAEA,KAAK,CAAC;MACpD,CAAC,CAAC;IACN;EACF,CAAC;EACDU,OAAOA,CAAA,EAAG;IACR,IAAI,CAACF,eAAe,CAAC,CAAC,EAAE;EAC1B;AACF,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}