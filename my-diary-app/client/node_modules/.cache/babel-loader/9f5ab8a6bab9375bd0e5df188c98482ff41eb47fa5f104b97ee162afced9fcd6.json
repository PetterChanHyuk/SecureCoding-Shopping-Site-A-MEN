{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport axios from 'axios';\nexport default {\n  data() {\n    return {\n      itemName: '',\n      selectedCategoryId: '',\n      newCategory: '',\n      itemDescription: '',\n      file: null,\n      categories: [],\n      itemNameError: '',\n      newCategoryError: ''\n    };\n  },\n  methods: {\n    validateItemName() {\n      const regex = /^[a-zA-Z0-9가-힣\\s]+$/;\n      if (!regex.test(this.itemName)) {\n        this.itemNameError = '특수문자는 사용할 수 없습니다.';\n      } else {\n        this.itemNameError = '';\n      }\n    },\n    validateNewCategory() {\n      const regex = /^[a-zA-Z0-9가-힣\\s]+$/;\n      if (!regex.test(this.newCategory)) {\n        this.newCategoryError = '특수문자는 사용할 수 없습니다.';\n      } else {\n        this.newCategoryError = '';\n      }\n    },\n    async fetchCategories() {\n      try {\n        const response = await axios.get(`${process.env.VUE_APP_BACKEND_URL}/categories`);\n        this.categories = response.data;\n      } catch (err) {\n        console.error('카테고리 목록을 불러오는 데 실패했습니다:', err);\n      }\n    },\n    onFileChange(event) {\n      const file = event.target.files[0];\n      const validTypes = ['image/jpeg', 'image/png', 'image/gif'];\n      const maxSize = 2 * 1024 * 1024; // 2MB\n\n      if (!validTypes.includes(file.type)) {\n        alert('유효하지 않은 파일 형식입니다. 이미지 파일을 업로드하세요.');\n        return;\n      }\n      if (file.size > maxSize) {\n        alert('파일 크기가 2MB를 초과합니다. 더 작은 파일을 업로드하세요.');\n        return;\n      }\n      this.file = file;\n    },\n    async addCategory() {\n      if (!this.newCategory || this.newCategoryError) {\n        alert('유효한 카테고리 이름을 입력해 주세요.');\n        return;\n      }\n      try {\n        const response = await axios.post(`${process.env.VUE_APP_BACKEND_URL}/categories`, {\n          name: this.newCategory\n        });\n        this.categories.push(response.data);\n        this.newCategory = '';\n      } catch (err) {\n        console.error('카테고리 추가에 실패했습니다:', err);\n      }\n    },\n    async addItem() {\n      const userId = localStorage.getItem('userId'); // 사용자 ID 가져오기\n\n      if (!this.itemName || !this.selectedCategoryId || !userId || this.itemNameError) {\n        alert('모든 필수 항목을 올바르게 입력해 주세요.');\n        return;\n      }\n      let imageUrl = '';\n      if (this.file) {\n        const formData = new FormData();\n        formData.append('file', this.file);\n        try {\n          const uploadResponse = await axios.post(`${process.env.VUE_APP_BACKEND_URL}/upload`, formData, {\n            headers: {\n              'Content-Type': 'multipart/form-data'\n            }\n          });\n          imageUrl = uploadResponse.data.filePath;\n        } catch (err) {\n          console.error('파일 업로드에 실패했습니다:', err);\n          alert('파일 업로드에 실패했습니다.');\n          return;\n        }\n      }\n      try {\n        const response = await axios.post(`${process.env.VUE_APP_BACKEND_URL}/items`, {\n          name: this.itemName,\n          categoryId: this.selectedCategoryId,\n          imageUrl,\n          description: this.itemDescription,\n          userId // 사용자 ID 추가\n        });\n        console.log('아이템 추가에 성공했습니다:', response.data);\n        this.$router.push('/mainpage');\n      } catch (err) {\n        console.error('아이템 추가에 실패했습니다:', err);\n        alert('아이템 추가에 실패했습니다.');\n      }\n    }\n  },\n  created() {\n    this.fetchCategories();\n  }\n};","map":{"version":3,"names":["axios","data","itemName","selectedCategoryId","newCategory","itemDescription","file","categories","itemNameError","newCategoryError","methods","validateItemName","regex","test","validateNewCategory","fetchCategories","response","get","process","env","VUE_APP_BACKEND_URL","err","console","error","onFileChange","event","target","files","validTypes","maxSize","includes","type","alert","size","addCategory","post","name","push","addItem","userId","localStorage","getItem","imageUrl","formData","FormData","append","uploadResponse","headers","filePath","categoryId","description","log","$router","created"],"sources":["C:\\Users\\cba64\\Coding\\SecureCoding-Shopping-Site-A-MEN\\my-diary-app\\client\\src\\components\\AddItem.vue"],"sourcesContent":["<template>\r\n  <div class=\"add-item-container\">\r\n    <h1>새로운 아이템 추가</h1>\r\n    <form @submit.prevent=\"addItem\">\r\n      <div class=\"form-group\">\r\n        <label for=\"itemName\">Item Name</label>\r\n        <input type=\"text\" id=\"itemName\" v-model=\"itemName\" @input=\"validateItemName\" required />\r\n        <p v-if=\"itemNameError\" class=\"error-message\">{{ itemNameError }}</p>\r\n      </div>\r\n\r\n      <div class=\"form-group\">\r\n        <label for=\"category\">Category</label>\r\n        <div class=\"category-input-container\">\r\n          <select id=\"category\" v-model=\"selectedCategoryId\" required size=\"1\" class=\"category-select\">\r\n              <option v-for=\"category in categories\" :key=\"category.id\" :value=\"category.id\">\r\n                {{ category.name }}\r\n              </option>\r\n          </select>\r\n        </div>\r\n        <input type=\"text\" v-model=\"newCategory\" @input=\"validateNewCategory\" placeholder=\"Add new category\" />\r\n        <button type=\"button\" @click=\"addCategory\" :disabled=\"newCategoryError || !newCategory\" class=\"add-category-btn\">Add Category</button>\r\n        <p v-if=\"newCategoryError\" class=\"error-message\">{{ newCategoryError }}</p>\r\n      </div>\r\n\r\n      <label for=\"itemDescription\">Item Description</label>\r\n      <div class=\"form-group\">\r\n        <textarea id=\"itemDescription\" v-model=\"itemDescription\"></textarea>\r\n      </div>\r\n\r\n      <div class=\"form-group\">\r\n        <label for=\"file\">Image</label>\r\n        <input type=\"file\" id=\"file\" @change=\"onFileChange\" />\r\n      </div>\r\n      \r\n      <button type=\"submit\">추가</button>\r\n    </form>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport axios from 'axios';\r\n\r\nexport default {\r\n  data() {\r\n    return {\r\n      itemName: '',\r\n      selectedCategoryId: '',\r\n      newCategory: '',\r\n      itemDescription: '',\r\n      file: null,\r\n      categories: [],\r\n      itemNameError: '',\r\n      newCategoryError: ''\r\n    };\r\n  },\r\n  methods: {\r\n    validateItemName() {\r\n      const regex = /^[a-zA-Z0-9가-힣\\s]+$/;\r\n      if (!regex.test(this.itemName)) {\r\n        this.itemNameError = '특수문자는 사용할 수 없습니다.';\r\n      } else {\r\n        this.itemNameError = '';\r\n      }\r\n    },\r\n    validateNewCategory() {\r\n      const regex = /^[a-zA-Z0-9가-힣\\s]+$/;\r\n      if (!regex.test(this.newCategory)) {\r\n        this.newCategoryError = '특수문자는 사용할 수 없습니다.';\r\n      } else {\r\n        this.newCategoryError = '';\r\n      }\r\n    },\r\n    async fetchCategories() {\r\n      try {\r\n        const response = await axios.get(`${process.env.VUE_APP_BACKEND_URL}/categories`);\r\n        this.categories = response.data;\r\n      } catch (err) {\r\n        console.error('카테고리 목록을 불러오는 데 실패했습니다:', err);\r\n      }\r\n    },\r\n    onFileChange(event) {\r\n      const file = event.target.files[0];\r\n      const validTypes = ['image/jpeg', 'image/png', 'image/gif'];\r\n      const maxSize = 2 * 1024 * 1024; // 2MB\r\n\r\n      if (!validTypes.includes(file.type)) {\r\n        alert('유효하지 않은 파일 형식입니다. 이미지 파일을 업로드하세요.');\r\n        return;\r\n      }\r\n\r\n      if (file.size > maxSize) {\r\n        alert('파일 크기가 2MB를 초과합니다. 더 작은 파일을 업로드하세요.');\r\n        return;\r\n      }\r\n\r\n      this.file = file;\r\n    },\r\n    async addCategory() {\r\n      if (!this.newCategory || this.newCategoryError) {\r\n        alert('유효한 카테고리 이름을 입력해 주세요.');\r\n        return;\r\n      }\r\n\r\n      try {\r\n        const response = await axios.post(`${process.env.VUE_APP_BACKEND_URL}/categories`, {\r\n          name: this.newCategory\r\n        });\r\n        this.categories.push(response.data);\r\n        this.newCategory = '';\r\n      } catch (err) {\r\n        console.error('카테고리 추가에 실패했습니다:', err);\r\n      }\r\n    },\r\n    async addItem() {\r\n      const userId = localStorage.getItem('userId'); // 사용자 ID 가져오기\r\n\r\n      if (!this.itemName || !this.selectedCategoryId || !userId || this.itemNameError) {\r\n        alert('모든 필수 항목을 올바르게 입력해 주세요.');\r\n        return;\r\n      }\r\n\r\n      let imageUrl = '';\r\n      if (this.file) {\r\n        const formData = new FormData();\r\n        formData.append('file', this.file);\r\n\r\n        try {\r\n          const uploadResponse = await axios.post(`${process.env.VUE_APP_BACKEND_URL}/upload`, formData, {\r\n            headers: {\r\n              'Content-Type': 'multipart/form-data'\r\n            }\r\n          });\r\n          imageUrl = uploadResponse.data.filePath;\r\n        } catch (err) {\r\n          console.error('파일 업로드에 실패했습니다:', err);\r\n          alert('파일 업로드에 실패했습니다.');\r\n          return;\r\n        }\r\n      }\r\n\r\n      try {\r\n        const response = await axios.post(`${process.env.VUE_APP_BACKEND_URL}/items`, {\r\n          name: this.itemName,\r\n          categoryId: this.selectedCategoryId,\r\n          imageUrl,\r\n          description: this.itemDescription,\r\n          userId // 사용자 ID 추가\r\n        });\r\n        console.log('아이템 추가에 성공했습니다:', response.data);\r\n        this.$router.push('/mainpage');\r\n      } catch (err) {\r\n        console.error('아이템 추가에 실패했습니다:', err);\r\n        alert('아이템 추가에 실패했습니다.');\r\n      }\r\n    }\r\n  },\r\n  created() {\r\n    this.fetchCategories();\r\n  }\r\n};\r\n</script>\r\n\r\n<style>\r\n.add-item-container {\r\n  width: 300px;\r\n  margin: auto;\r\n  padding: 20px;\r\n  box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);\r\n  text-align: center;\r\n}\r\n\r\n.form-group {\r\n  margin-bottom: 20px;\r\n}\r\n\r\n.custom-select-container {\r\n  position: relative;\r\n  display: flex;\r\n}\r\n\r\n.category-select {\r\n  flex: 0 0 50%; /* 50%의 고정된 너비 */\r\n  margin-right: 10px;\r\n  margin-bottom: 10px;\r\n  overflow-y: auto;\r\n}\r\n\r\n.category-input-container {\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n}\r\n\r\n.custom-select-container input[type=\"text\"] {\r\n  flex: 1;\r\n  margin-right: 10px;\r\n}\r\n\r\n.custom-select-container button {\r\n  flex-shrink: 0;\r\n}\r\n\r\n.custom-select-container::after {\r\n  content: '▼';\r\n  position: absolute;\r\n  top: 50%;\r\n  right: 10px;\r\n  transform: translateY(-50%);\r\n  pointer-events: none;\r\n}\r\n\r\n.error-message {\r\n  color: red;\r\n  font-size: 0.9em;\r\n}\r\n</style>"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}