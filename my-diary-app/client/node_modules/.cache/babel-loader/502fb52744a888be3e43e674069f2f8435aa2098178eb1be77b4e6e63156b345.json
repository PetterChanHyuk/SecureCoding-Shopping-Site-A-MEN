{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport api from '../api'; // Axios 인스턴스 임포트\nimport router from '../router'; // 라우터 인스턴스\n\nexport default {\n  data() {\n    return {\n      email: '',\n      password: '',\n      errorMessage: '',\n      // 로그인 실패 시 에러 메시지를 저장할 변수\n      loginDelay: false // 로그인 버튼 딜레이를 주기 위한 변수\n    };\n  },\n  methods: {\n    escapeHtml(text) {\n      return text.replace(/[&<>\"'`=]/g, function (s) {\n        return {\n          '&': '&amp;',\n          '<': '&lt;',\n          '>': '&gt;',\n          '\"': '&quot;',\n          \"'\": '&#39;',\n          '`': '&#x60;',\n          '=': '&#x3D;'\n        }[s];\n      });\n    },\n    login() {\n      if (this.loginDelay) {\n        return;\n      }\n\n      // 이메일과 비밀번호의 길이 제한을 검사합니다.\n      if (this.email.length > 100) {\n        alert(\"이메일은 최대 100자까지 입력할 수 있습니다.\");\n        return;\n      }\n      if (this.password.length > 20) {\n        alert(\"비밀번호는 최대 20자까지 입력할 수 있습니다.\");\n        return;\n      }\n      this.loginDelay = true;\n      const userData = {\n        email: this.escapeHtml(this.email),\n        password: this.escapeHtml(this.password)\n      };\n      api.post('/userlogin', userData).then(response => {\n        // 로그인 성공\n        alert(\"108번가에 오신 것을 환영합니다.\");\n        console.log('로그인 성공:', response.data);\n        localStorage.setItem('userId', response.data.userId);\n        router.push('/mainpage');\n      }).catch(error => {\n        // 로그인 실패\n        if (error.response) {\n          if (error.response.status === 401) {\n            if (error.response.data.message === '이메일 인증이 완료되지 않았습니다.') {\n              alert(\"이메일 인증이 완료되지 않았습니다.\");\n            } else if (error.response.data.message === '이미 다른 디바이스에서 로그인 중입니다.') {\n              alert(\"이미 다른 디바이스에서 로그인 중입니다.\");\n            } else {\n              alert(\"잘못된 정보입니다.\\n다시 확인해주세요.\");\n            }\n          } else if (error.response.status === 429) {\n            // rate limit 초과 시 처리\n            alert(\"요청이 너무 많습니다. 잠시 후 다시 시도해주세요.\");\n          } else {\n            alert(\"알 수 없는 오류가 발생했습니다.\");\n          }\n          console.error('로그인 실패:', error.response.data.message);\n        } else {\n          alert(\"알 수 없는 오류가 발생했습니다.\");\n          console.error('로그인 실패:', error);\n        }\n        this.errorMessage = error.response ? error.response.data.message : \"로그인에 실패했습니다.\";\n        setTimeout(() => {\n          this.loginDelay = false;\n        }, 1000);\n      });\n    }\n  }\n};","map":{"version":3,"names":["api","router","data","email","password","errorMessage","loginDelay","methods","escapeHtml","text","replace","s","login","length","alert","userData","post","then","response","console","log","localStorage","setItem","userId","push","catch","error","status","message","setTimeout"],"sources":["D:\\SecureCoding-Shopping-Site-A-MEN\\my-diary-app\\client\\src\\components\\UserLogin.vue"],"sourcesContent":["// src/views/Login.vue\r\n<template>\r\n  <div class=\"login-container\">\r\n    <div class=\"login-box\">\r\n      <h1 class=\"login-header\">108번가</h1>\r\n      <div class=\"inputs-container\">\r\n        <div class=\"fields-container\">\r\n          <input type=\"email\" placeholder=\"이메일\" class=\"input-field\" v-model=\"email\" @keyup.enter=\"login\" maxlength=\"100\"/>\r\n          <input type=\"password\" placeholder=\"비밀번호\" class=\"input-field\" v-model=\"password\" @keyup.enter=\"login\" maxlength=\"20\"/>\r\n        </div>\r\n        <button class=\"login-btn\" @click=\"login\" :disabled=\"loginDelay\" :class=\"{ 'disabled': loginDelay }\">로그인</button>\r\n      </div>\r\n      <div class=\"links\">\r\n        <a href=\"/userregister\">회원가입</a> |\r\n        <a href=\"/find-account\">아이디/비밀번호 찾기</a>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport api from '../api'; // Axios 인스턴스 임포트\r\nimport router from '../router'; // 라우터 인스턴스\r\n\r\nexport default {\r\n  data() {\r\n    return {\r\n      email: '',\r\n      password: '',\r\n      errorMessage: '', // 로그인 실패 시 에러 메시지를 저장할 변수\r\n      loginDelay: false // 로그인 버튼 딜레이를 주기 위한 변수\r\n    };\r\n  },\r\n  methods: {\r\n    escapeHtml(text) {\r\n      return text.replace(/[&<>\"'`=]/g, function (s) {\r\n        return {\r\n          '&': '&amp;',\r\n          '<': '&lt;',\r\n          '>': '&gt;',\r\n          '\"': '&quot;',\r\n          \"'\": '&#39;',\r\n          '`': '&#x60;',\r\n          '=': '&#x3D;'\r\n        }[s];\r\n      });\r\n    },\r\n    login() {\r\n      if (this.loginDelay) {\r\n        return;\r\n      }\r\n\r\n      // 이메일과 비밀번호의 길이 제한을 검사합니다.\r\n      if (this.email.length > 100) {\r\n        alert(\"이메일은 최대 100자까지 입력할 수 있습니다.\");\r\n        return;\r\n      }\r\n      if (this.password.length > 20) {\r\n        alert(\"비밀번호는 최대 20자까지 입력할 수 있습니다.\");\r\n        return;\r\n      }\r\n\r\n      this.loginDelay = true;\r\n      const userData = {\r\n        email: this.escapeHtml(this.email),\r\n        password: this.escapeHtml(this.password)\r\n      };\r\n\r\n      api.post('/userlogin', userData)\r\n        .then(response => {\r\n          // 로그인 성공\r\n          alert(\"108번가에 오신 것을 환영합니다.\");\r\n          console.log('로그인 성공:', response.data);\r\n          localStorage.setItem('userId', response.data.userId);\r\n          router.push('/mainpage');\r\n        })\r\n        .catch(error => {\r\n          // 로그인 실패\r\n          if (error.response) {\r\n            if (error.response.status === 401) {\r\n              if (error.response.data.message === '이메일 인증이 완료되지 않았습니다.') {\r\n                alert(\"이메일 인증이 완료되지 않았습니다.\");\r\n              } else if (error.response.data.message === '이미 다른 디바이스에서 로그인 중입니다.') {\r\n                alert(\"이미 다른 디바이스에서 로그인 중입니다.\");\r\n              } else {\r\n                alert(\"잘못된 정보입니다.\\n다시 확인해주세요.\");\r\n              }\r\n            } else if (error.response.status === 429) {\r\n              // rate limit 초과 시 처리\r\n              alert(\"요청이 너무 많습니다. 잠시 후 다시 시도해주세요.\");\r\n            } else {\r\n              alert(\"알 수 없는 오류가 발생했습니다.\");\r\n            }\r\n            console.error('로그인 실패:', error.response.data.message);\r\n          } else {\r\n            alert(\"알 수 없는 오류가 발생했습니다.\");\r\n            console.error('로그인 실패:', error);\r\n          }\r\n          this.errorMessage = error.response ? error.response.data.message : \"로그인에 실패했습니다.\";\r\n\r\n          setTimeout(() => {\r\n            this.loginDelay = false;\r\n          }, 1000);\r\n        });\r\n    }\r\n  }\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.login-container {\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  height: 80vh;\r\n}\r\n\r\n.login-box {\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  justify-content: center;\r\n  padding: 10px 20px 20px;\r\n  border: 2px solid #ddd;\r\n  border-radius: 8px;\r\n  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);\r\n  background-color: #f9f9f9;\r\n  margin: auto;\r\n  width: 300px;\r\n  height: 20vh;\r\n}\r\n\r\n.inputs-container {\r\n  display: flex;\r\n  justify-content: space-between;\r\n}\r\n\r\n.fields-container {\r\n  display: flex;\r\n  flex-direction: column;\r\n}\r\n\r\n.login-header {\r\n  font-size: 2em;\r\n  font-weight: bold;\r\n  margin-bottom: 20px;\r\n  margin-top: 0;\r\n}\r\n\r\n.input-field {\r\n  margin-bottom: 10px;\r\n  width: 150px;\r\n}\r\n\r\n.login-btn {\r\n  height: 52px;\r\n  width: 52px;\r\n  margin-left: 20px;\r\n  background-color: blue;\r\n  color: white;\r\n  cursor: pointer;\r\n  border: none;\r\n}\r\n\r\n.login-btn.disabled {\r\n  background-color: #ccc;\r\n  cursor: not-allowed;\r\n}\r\n\r\n.links {\r\n  text-align: center;\r\n  width: 100%;\r\n  padding-top: 10px;\r\n}\r\n</style>\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}