{"ast":null,"code":"import { createElementVNode as _createElementVNode, createCommentVNode as _createCommentVNode, toDisplayString as _toDisplayString, createTextVNode as _createTextVNode, resolveComponent as _resolveComponent, withCtx as _withCtx, createVNode as _createVNode, vModelText as _vModelText, withDirectives as _withDirectives, normalizeClass as _normalizeClass, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nconst _hoisted_1 = {\n  id: \"app\"\n};\nconst _hoisted_2 = {\n  class: \"timer\"\n};\nconst _hoisted_3 = {\n  class: \"user-info\"\n};\nconst _hoisted_4 = {\n  class: \"category-container\"\n};\nconst _hoisted_5 = [\"onClick\"];\nconst _hoisted_6 = {\n  class: \"item-container\"\n};\nconst _hoisted_7 = {\n  class: \"item-content\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_router_link = _resolveComponent(\"router-link\");\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createElementVNode(\"header\", null, [_createElementVNode(\"h1\", {\n    onClick: _cache[0] || (_cache[0] = (...args) => $options.refreshPage && $options.refreshPage(...args))\n  }, \"108번가\"), _createCommentVNode(\" 클릭 이벤트 추가 \"), _createCommentVNode(\" 남은 시간 타이머 \"), _createElementVNode(\"div\", _hoisted_2, \"자동 로그아웃: \" + _toDisplayString($data.remainingTime) + \"초\", 1 /* TEXT */), _createCommentVNode(\" 사용자 정보, 마이페이지 및 로그아웃 링크 \"), _createElementVNode(\"div\", _hoisted_3, [_createTextVNode(_toDisplayString($data.userName) + \"님 | \", 1 /* TEXT */), _createVNode(_component_router_link, {\n    to: \"/mypage\"\n  }, {\n    default: _withCtx(() => [_createTextVNode(\"마이페이지\")]),\n    _: 1 /* STABLE */\n  }), _createTextVNode(\" | \"), _createElementVNode(\"a\", {\n    href: \"#\",\n    onClick: _cache[1] || (_cache[1] = (...args) => $options.logout && $options.logout(...args))\n  }, \"로그아웃\")]), _createElementVNode(\"button\", {\n    onClick: _cache[2] || (_cache[2] = (...args) => $options.login && $options.login(...args))\n  }, \"로그인\")]), _createElementVNode(\"main\", null, [_createElementVNode(\"div\", null, [_withDirectives(_createElementVNode(\"input\", {\n    type: \"text\",\n    \"onUpdate:modelValue\": _cache[3] || (_cache[3] = $event => $data.searchQuery = $event),\n    placeholder: \"Search for items...\"\n  }, null, 512 /* NEED_PATCH */), [[_vModelText, $data.searchQuery]]), _createElementVNode(\"button\", {\n    onClick: _cache[4] || (_cache[4] = (...args) => $options.search && $options.search(...args))\n  }, \"검색\")]), _createElementVNode(\"div\", _hoisted_4, [_createElementVNode(\"button\", {\n    class: _normalizeClass({\n      'active': $data.selectedCategory === null\n    }),\n    onClick: _cache[5] || (_cache[5] = $event => $options.filterByCategory(null))\n  }, \" 전체 \", 2 /* CLASS */), (_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.categories, category => {\n    return _openBlock(), _createElementBlock(\"button\", {\n      key: category.id,\n      onClick: $event => $options.filterByCategory(category),\n      class: _normalizeClass({\n        'active': $data.selectedCategory === category\n      })\n    }, _toDisplayString(category.name), 11 /* TEXT, CLASS, PROPS */, _hoisted_5);\n  }), 128 /* KEYED_FRAGMENT */))]), _createElementVNode(\"div\", _hoisted_6, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($options.filteredItems, item => {\n    return _openBlock(), _createElementBlock(\"div\", {\n      key: item.id,\n      class: \"item\"\n    }, [_createElementVNode(\"div\", _hoisted_7, _toDisplayString(item.name), 1 /* TEXT */)]);\n  }), 128 /* KEYED_FRAGMENT */))])])]);\n}","map":{"version":3,"names":["id","class","_createElementBlock","_hoisted_1","_createElementVNode","onClick","_cache","args","$options","refreshPage","_createCommentVNode","_hoisted_2","_toDisplayString","$data","remainingTime","_hoisted_3","_createTextVNode","userName","_createVNode","_component_router_link","to","default","_withCtx","_","href","logout","login","type","$event","searchQuery","placeholder","search","_hoisted_4","_normalizeClass","selectedCategory","filterByCategory","_Fragment","_renderList","categories","category","key","name","_hoisted_5","_hoisted_6","filteredItems","item","_hoisted_7"],"sources":["D:\\SecureCoding-Shopping-Site-A-MEN\\my-diary-app\\client\\src\\components\\MainPage.vue"],"sourcesContent":["<template>\r\n  <div id=\"app\">\r\n    <header>\r\n      <h1 @click=\"refreshPage\">108번가</h1> <!-- 클릭 이벤트 추가 -->\r\n      <!-- 남은 시간 타이머 -->\r\n      <div class=\"timer\">자동 로그아웃: {{ remainingTime }}초</div>\r\n      <!-- 사용자 정보, 마이페이지 및 로그아웃 링크 -->\r\n      <div class=\"user-info\">\r\n        {{ userName }}님 | \r\n        <router-link to=\"/mypage\">마이페이지</router-link> |\r\n        <a href=\"#\" @click=\"logout\">로그아웃</a>\r\n      </div>\r\n      <button @click=\"login\">로그인</button>\r\n    </header>\r\n    <main>\r\n      <div>\r\n        <input type=\"text\" v-model=\"searchQuery\" placeholder=\"Search for items...\" />\r\n        <button @click=\"search\">검색</button>\r\n      </div>\r\n      <div class=\"category-container\">\r\n        <button \r\n          :class=\"{'active': selectedCategory === null}\" \r\n          @click=\"filterByCategory(null)\">\r\n          전체\r\n        </button>\r\n        <button \r\n          v-for=\"category in categories\" \r\n          :key=\"category.id\" \r\n          @click=\"filterByCategory(category)\"\r\n          :class=\"{'active': selectedCategory === category}\">\r\n          {{ category.name }}\r\n        </button>\r\n      </div>\r\n      <div class=\"item-container\">\r\n        <div v-for=\"item in filteredItems\" :key=\"item.id\" class=\"item\">\r\n          <div class=\"item-content\">{{ item.name }}</div>\r\n        </div>\r\n      </div>\r\n    </main>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport axios from 'axios';\r\n\r\nexport default {\r\n  name: 'MainPage',\r\n  data() {\r\n    return {\r\n      userName: '익명',\r\n      remainingTime: 600, // 초단위 (10분)\r\n      timer: null,\r\n      searchQuery: '', // 입력 필드의 값을 저장\r\n      filteredQuery: '', // 실제로 필터링에 사용되는 값을 저장\r\n      selectedCategory: null, // 선택된 카테고리를 저장\r\n      categories: [\r\n        { id: 1, name: '카테고리 1' },\r\n        { id: 2, name: '카테고리 2' },\r\n        { id: 3, name: '카테고리 3' },\r\n        { id: 4, name: '카테고리 4' },\r\n      ],\r\n      items: [\r\n        { id: 1, name: 'Item 1', category: 1 },\r\n        { id: 2, name: 'Item 2', category: 2 },\r\n        { id: 3, name: 'Item 3', category: 3 },\r\n        { id: 4, name: 'Item 4', category: 4 },\r\n        { id: 5, name: 'Item 5', category: 1 },\r\n        { id: 6, name: 'Item 6', category: 2 },\r\n        { id: 7, name: 'Item 7', category: 3 },\r\n        { id: 8, name: 'Item 8', category: 4 },\r\n        { id: 9, name: 'Item 9', category: 1 },\r\n        { id: 10, name: 'Item 10', category: 2 },\r\n        { id: 11, name: 'Item 11', category: 3 },\r\n        { id: 12, name: 'Item 12', category: 4 },\r\n        { id: 13, name: 'Item 13', category: 1 },\r\n        { id: 14, name: 'Item 14', category: 2 },\r\n        { id: 15, name: 'Item 15', category: 3 },\r\n        { id: 16, name: 'Item 16', category: 4 },\r\n        { id: 17, name: 'Item 17', category: 1 },\r\n        { id: 18, name: 'Item 18', category: 2 },\r\n        { id: 19, name: 'Item 19', category: 3 },\r\n        { id: 20, name: 'Item 20', category: 4 },\r\n      ]\r\n    };\r\n  },\r\n  computed: {\r\n    filteredItems() {\r\n      return this.items.filter(item => {\r\n        const matchesQuery = item.name.toLowerCase().includes(this.filteredQuery.toLowerCase());\r\n        const matchesCategory = this.selectedCategory ? item.category === this.selectedCategory.id : true;\r\n        return matchesQuery && matchesCategory;\r\n      });\r\n    }\r\n  },\r\n  methods: {\r\n    login() {\r\n      alert('로그인 버튼 클릭!');\r\n    },\r\n    search() {\r\n      this.filteredQuery = this.searchQuery; // 검색 버튼 클릭 시 filteredQuery 업데이트\r\n    },\r\n    refreshPage() {\r\n      window.location.reload(); // 페이지 새로고침\r\n    },\r\n    filterByCategory(category) {\r\n      this.selectedCategory = category;\r\n    },\r\n    resetTimer() {\r\n      this.remainingTime = 600; // 타이머를 10분으로 재설정\r\n    },\r\n\r\n    updateTimer() {\r\n      if (this.remainingTime > 0) {\r\n        this.remainingTime--;\r\n      } else {\r\n        this.logout(); // 타이머가 0이 되면 로그아웃 실행\r\n      }\r\n    },\r\n    \r\n    logout() {\r\n      clearInterval(this.timerId); // 타이머 초기화\r\n      const userId = localStorage.getItem('userId');\r\n      if (userId) {\r\n        axios.post(`${process.env.VUE_APP_BACKEND_URL}/userlogout`, { userId })\r\n          .then(() => {\r\n            localStorage.removeItem('userId');\r\n            this.$router.push('/userlogin'); // 로그인 페이지로 리디렉션\r\n          })\r\n          .catch(error => {\r\n            console.error('로그아웃 실패:', error);\r\n          });\r\n      }\r\n    },\r\n\r\n    fetchUserName() {\r\n      axios.get(`${process.env.VUE_APP_BACKEND_URL}/username`, {\r\n          params: {\r\n          userId: localStorage.getItem('userId') // 사용자 ID 가져오기\r\n          }\r\n      })\r\n      .then(response => {\r\n          this.userName = response.data.name; // 사용자 이름 설정\r\n      })\r\n      .catch(error => {\r\n          console.error('Error fetching user name:', error);\r\n      });\r\n    }\r\n  },\r\n\r\n  created() {\r\n    this.fetchUserName(); // 컴포넌트 생성 시 사용자 이름 조회\r\n    \r\n    // 로컬 스토리지에서 사용자 ID 확인\r\n    const userId = localStorage.getItem('userId');\r\n\r\n    // 사용자 ID가 없으면 로그인 페이지로 리디렉션\r\n    if (!userId) {\r\n      alert(\"비정상적인 접근입니다.\");\r\n      this.$router.push('/userlogin');\r\n    }\r\n  },\r\n  mounted() {\r\n    this.timer = setInterval(this.updateTimer, 1000); // 1초마다 타이머 감소\r\n\r\n    // 사용자 활동 감지\r\n    window.addEventListener('mousemove', this.resetTimer);\r\n    window.addEventListener('keydown', this.resetTimer);\r\n  }, \r\n  beforeUnmount() {\r\n    clearInterval(this.timer); // 컴포넌트가 제거되면 타이머 정리\r\n    window.removeEventListener('mousemove', this.resetTimer);\r\n    window.removeEventListener('keydown', this.resetTimer);\r\n  }\r\n};\r\n</script>\r\n\r\n<style>\r\nbody {\r\n  font-family: Arial, sans-serif;\r\n  margin: 0;\r\n  padding: 0;\r\n}\r\n#app {\r\n  text-align: center;\r\n}\r\nheader {\r\n  background-color: #f8f9fa;\r\n  padding: 20px;\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n}\r\nh1 {\r\n  margin: 0;\r\n  cursor: pointer; /* 클릭 가능한 커서 */\r\n}\r\nmain {\r\n  padding: 20px;\r\n}\r\ninput {\r\n  padding: 10px;\r\n  font-size: 16px;\r\n  margin-right: 10px;\r\n}\r\nbutton {\r\n  padding: 10px 20px;\r\n  font-size: 16px;\r\n  cursor: pointer;\r\n  margin: 5px;\r\n}\r\nbutton.active {\r\n  background-color: #007bff;\r\n  color: white;\r\n}\r\n.category-container {\r\n  margin: 20px 0;\r\n}\r\n.item-container {\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n  justify-content: center;\r\n}\r\n.item {\r\n  background-color: #e9ecef;\r\n  margin: 10px;\r\n  padding: 10px;\r\n  font-size: 18px;\r\n  width: calc(25% - 20px); /* 4 columns with margin */\r\n  box-sizing: border-box;\r\n  position: relative;\r\n  /* 정사각형을 만들기 위해 추가된 스타일 */\r\n}\r\n.item::before {\r\n  content: \"\";\r\n  display: block;\r\n  padding-bottom: 100%; /* 1:1 비율을 위해 */\r\n}\r\n.item-content {\r\n  position: absolute;\r\n  top: 50%;\r\n  left: 50%;\r\n  transform: translate(-50%, -50%);\r\n}\r\n</style>"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}